<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang=""> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8" lang=""> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9" lang=""> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang=""> <!--<![endif]-->
    <head>
        <% include partials/head %>
        <title>Zihao Zhang</title>

        <script src="//cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js"></script>

    </head>
    <body>
        <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
        <div id="wrapper">
        <header class="navbar navbar-static-top main-nav" role="banner">
            <div class="container">
                <div class="navbar-header">
                    <button class="navbar-toggle collapsed" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a href="/" class="navbar-brand">Zihao Zhang</a>
                </div>
                <nav class="collapse navbar-collapse bs-navbar-collapse">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="http://blog.zihao.me">Blog</a></li>
                        <li><a href="http://seafile.zihao.me">Cloud</a></li>
                        <li><a href="https://github.com/zzh8829?tab=repositories">Projects</a></li>
						<li><a href="static/resume.pdf">Resume</a></li>
                        <li><a href="mailto:zzh8829@gmail.com">Contact</a></li>
                    </ul>
                </nav>
            </div>
        </header>

        <main id="content">

        </main>

        <footer role="contentinfo">
            <div class="container">
            <div class="main-social">
                <ul class = "main-social-buttons">
                <a href="https://github.com/zzh8829" target="_blank"><li><i class="social fa fa-github-square fa-2x social-github"></i></li></a>
                <a href="http://quora.com/Zihao-Zhang" target="_blank"><li><img class="social fa fa-2x social-quora" src="/img/quora-64-gray.png"></img></li></a>
                <a href="https://twitter.com/zzh8829" target="_blank"><li><i class="social fa fa-twitter-square fa-2x social-twitter"></i></li></a>
                <a href="https://linkedin.com/in/zzh8829" target="_blank"><li><i class="social fa fa-linkedin-square fa-2x social-linkedin"></i></li></a>
                <a href="mailto:zzh8829@gmail.com"><li><i class="social fa fa-envelope-square fa-2x social-email"></i></li></a>
                <a href="https://steamcommunity.com/id/zzh8829" target="_blank"><li><i class="social fa fa-steam-square fa-2x social-steam"></i></li></a>
                <a href="https://www.facebook.com/zihao.pro.zhang" target="_blank"><li><i class="social fa fa-facebook-square fa-2x social-facebook"></i></li></a>
                <a href="https://plus.google.com/108091426289970576616" target="_blank"><li><i class="social fa fa-google-plus-square fa-2x social-googleplus"></i></li></a>
                <a href="https://www.youtube.com/user/zzhist" target="_blank"><li><i class="social fa fa-youtube-square fa-2x social-youtube"></i></li></a>
                <a href="https://instagram.com/zzihaoz" target="_blank"><li><i class="social fa fa-instagram fa-2x social-instagram"></i></li></a>
                <a href="https://www.pinterest.com/zzh8829" target="_blank"><li><i class="social fa fa-pinterest-square fa-2x social-pinterest"></i></li></a>
                <a href="https://www.tumblr.com/blog/zzh8829" target="_blank"><li><i class="social fa fa-tumblr-square fa-2x social-tumblr"></i></li></a>
                <a href="www.last.fm/user/zzh8829" target="_blank"><li><i class="social fa fa-lastfm-square fa-2x social-lastfm"></i></li></a>
                </ul>
            </div>
            <p>Designed and built with love by <a href="https://twitter.com/zzh8829" target="_blank">@zzh8829</a>.</p>
            </div>
        </footer>
        </div>

        <script src="/js/main.js"></script>
        <script src="/js/ga.js"></script>

        <script src="//zihao.ca/three.js/examples/js/Detector.js"></script>
        <script src="//zihao.ca/three.js/examples/js/libs/stats.min.js"></script>

        <script>
            if (!Detector.webgl ) Detector.addGetWebGLMessage();

            var width, height;
            var scene, camera, renderer;

            var rollOverMesh, rollOverMaterial;
            var cubeGeo, cubeMaterial;

            var plane, cube;
            var mouse, raycaster, isShiftDown = false;

            var blocks = {};
            var objects = [];

            var stats;

            var clock = new THREE.Clock();

            var autoRotate = true;
            var keysdown = {};

            var angle = 0;
            var zoom = 1;

            THREE.ImageUtils.crossOrigin = '';

            init();

            var socket = io();
            socket.on('init', function(data) {
                for(var pos in blocks) {
                    serverDeleteBlock.apply(null,pos.split(',').map(Number));
                }
                for(var pos in data) {
                    serverInsertBlock.apply(null,pos.split(',').map(Number));
                }
            });
            socket.on('insert', function(data) {
                serverInsertBlock.apply(null,data);
            });
            socket.on('delete', function(data) {
                serverDeleteBlock.apply(null,data);
            });
            socket.on('clear', function(data) {
                serverClearBlocks.apply(null,data);
            })

            animate();

            function init() {
                width = window.innerWidth;
                height = window.innerHeight;

                scene = new THREE.Scene();

                camera = new THREE.PerspectiveCamera( 45, width/height, 1, 10000);
                //camera.position.set( 200, 320, 640 );
                camera.lookAt( new THREE.Vector3() );

                rollOverGeo = new THREE.BoxGeometry( 50, 50, 50 );
                rollOverMaterial = new THREE.MeshBasicMaterial( { color: 0x1B5C5A, opacity: 0.5, transparent: true } );
                rollOverMesh = new THREE.Mesh( rollOverGeo, rollOverMaterial );
                rollOverMesh.visible = false;
                scene.add( rollOverMesh );

                // cubes

                cubeGeo = new THREE.BoxGeometry( 50, 50, 50 );
                cubeMaterial = new THREE.MeshLambertMaterial( { color: 0xfeb74c, shading: THREE.FlatShading} );

                // grid

                var size = 2000, step = 50;

                var geometry = new THREE.Geometry();

                for ( var i = - size; i <= size; i += step ) {

                    geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
                    geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );

                    geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
                    geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );

                }

                var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.2, transparent: true } );

                var line = new THREE.Line( geometry, material, THREE.LinePieces );
                scene.add( line );

                //

                raycaster = new THREE.Raycaster();
                mouse = new THREE.Vector2(-1,-1);

                var geometry = new THREE.PlaneBufferGeometry( 4000, 4000 );
                geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

                plane = new THREE.Mesh( geometry );
                plane.visible = false;
                scene.add( plane );

                objects.push( plane );

                // Lights

                var ambientLight = new THREE.AmbientLight( 0x606060 );
                scene.add( ambientLight );

                var directionalLight = new THREE.DirectionalLight( 0xffffff );
                directionalLight.position.set( 1, 0.75, 0.5 ).normalize();
                scene.add( directionalLight );

                renderer = new THREE.WebGLRenderer({alpha: true, antialias:true});
                renderer.setSize(width, height);
                renderer.domElement.style.position = 'absolute';
                renderer.domElement.style.top = '0px';

                stats = new Stats();
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.right = '0px';
                stats.domElement.style.bottom = '0px';
                stats.domElement.style.zIndex = 100;
                stats.domElement.style.visibility = 'hidden';

                window.addEventListener('resize', onWindowResize, false);

                document.addEventListener( 'mousemove', onDocumentMouseMove, false );
                renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );
                //renderer.domElement.addEventListener( 'touchstart', onDocumentTouchStart, false );
                //renderer.domElement.addEventListener( 'touchend', onDocumentTouchEnd, false);
                document.addEventListener( 'keydown', onDocumentKeyDown, false );
                document.addEventListener( 'keyup', onDocumentKeyUp, false );

                document.body.appendChild(stats.domElement);
                $("#content").append(renderer.domElement);
            }

            function onDocumentMouseMove( event ) {

                mouse.set((event.clientX/width) * 2 - 1, - (event.clientY/height) * 2 + 1 );

            }

            function onDocumentMouseDown( event ) {

                mouse.set((event.clientX/width) * 2 - 1, - (event.clientY/height) * 2 + 1 );

                raycaster.setFromCamera( mouse, camera );

                var intersects = raycaster.intersectObjects( objects );

                if ( intersects.length > 0 ) {
                    var intersect = intersects[ 0 ];
                    // delete cube
                    if ( event.ctrlKey || event.metaKey) {
                        if ( intersect.object != plane ) {
                            var position = new THREE.Vector3().copy(intersect.object.position).divideScalar(50).floor();
                            deleteBlock(position.x,position.y,position.z);
                        }
                    // create cube
                    } else {
                        var position = new THREE.Vector3().copy(intersect.point).add( intersect.face.normal ).divideScalar( 50 ).floor();
                        insertBlock(position.x,position.y,position.z);
                    }
                }
            }

            var clickTimer = null;
            var lastTap = 0;

            function onDocumentTouchStart( event ) {
                //event.preventDefault()
                return; // Does not work!
                var pointer = getPointerEvent(event);
                var currX = pointer.pageX;
                var currY = pointer.pageY;

                mouse.set((currX/width) * 2 - 1, - (currY/height) * 2 + 1 );

                raycaster.setFromCamera( mouse, camera );

                var intersects = raycaster.intersectObjects( objects );

                if( intersects.length > 0 ) {
                    var intersect = intersects[ 0 ];
                    if (clickTimer == null) {
                        clickTimer = setTimeout(function () {
                            clickTimer = null;
                            var position = new THREE.Vector3().copy(intersect.point).add( intersect.face.normal ).divideScalar( 50 ).floor();
                            insertBlock(position.x,position.y,position.z);
                        }, 300)
                    } else {
                        clearTimeout(clickTimer);
                        clickTimer = null;

                        if ( intersect.object != plane ) {
                            var position = new THREE.Vector3().copy(intersect.object.position).divideScalar(50).floor();
                            deleteBlock(position.x,position.y,position.z);
                        }
                    }
                }
            }

            function onDocumentTouchEnd( event ) {
                //event.preventDefault();
            }

            function onDocumentKeyDown( event ) {
                keysdown[event.keyCode] = true;

                switch( event.keyCode ) {
                    case 65:
                        autoRotate = false;
                        break;
                    case 68:
                        autoRotate = false;
                        break;
                    case 81:
                        if(stats.domElement.style.visibility == 'hidden') {
                            stats.domElement.style.visibility = 'visible';
                        } else {
                            stats.domElement.style.visibility = 'hidden';
                        }
                        break;
                    case 67:
                        clearBlocks();
                        break;
                }

            }

            function onDocumentKeyUp( event ) {
                keysdown[event.keyCode] = false;

                switch ( event.keyCode ) {
                    case 32:
                        autoRotate = !autoRotate;
                        break;
                }
            }

            function animate() {
                requestAnimationFrame( animate );

                var delta = clock.getDelta();

                if(mouse.x != -1 && mouse.y != -1)
                {
                    rollOverMesh.visible = true;

                    raycaster.setFromCamera( mouse, camera );

                    var intersects = raycaster.intersectObjects( objects );

                    if ( intersects.length > 0 ) {

                        var intersect = intersects[ 0 ];

                        rollOverMesh.position.copy( intersect.point ).add( intersect.face.normal );
                        rollOverMesh.position.divideScalar( 50 ).floor().multiplyScalar( 50 ).addScalar( 25 );

                    }
                }

                if(autoRotate)
                {
                    angle += delta*0.1;
                }

                if(keysdown[65])
                {
                    angle += delta;
                }

                if(keysdown[68])
                {
                    angle -= delta;
                }

                if(keysdown[83]) {
                    zoom = Math.min(2, zoom*1.01);
                }

                if(keysdown[87]) {
                    zoom = Math.max(1, zoom/1.01);
                }

                camera.position.x = Math.cos(angle) * 700 * zoom;
                camera.position.y = 800 * zoom;
                camera.position.z = Math.sin(angle) * 700 * zoom;
                camera.lookAt(new THREE.Vector3());

                renderer.render( scene, camera );

                stats.update();
            }

            function onWindowResize(){
                width = window.innerWidth;
                height = window.innerHeight;
                camera.aspect = width/height;
                camera.updateProjectionMatrix();
                renderer.setSize(width, height);
            }

            function insertBlock(x,y,z) {
                serverInsertBlock(x,y,z);
                socket.emit("insert", [x,y,z]);
            }

            function serverInsertBlock(x,y,z) {
                if(!([x,y,z] in blocks))
                {
                    var voxel = new THREE.Mesh( cubeGeo, cubeMaterial );
                    voxel.position.set(x,y,z).multiplyScalar( 50 ).addScalar( 25 );
                    scene.add( voxel );
                    objects.push( voxel );
                    blocks[[x,y,z]] = voxel;
                }
            }

            function deleteBlock(x,y,z) {
                serverDeleteBlock(x,y,z);
                socket.emit("delete", [x,y,z]);
            }

            function serverDeleteBlock(x,y,z) {
                if([x,y,z] in blocks)
                {
                    scene.remove(blocks[[x,y,z]]);
                    objects.splice(objects.indexOf( blocks[[x,y,z]] ), 1 );
                    delete blocks[[x,y,z]];
                }
            }

            function clearBlocks() {
                serverClearBlocks();
                socket.emit('clear');
            }

            function serverClearBlocks() {
                for(var pos in blocks) {
                    serverDeleteBlock.apply(null,pos.split(',').map(Number));
                }
            }
        </script>
    </body>
</html>
